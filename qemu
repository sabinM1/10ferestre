#!/bin/bash

TOTAL_CORES='0-11'
TOTAL_CORES_MASK=FFF            # 0-11, bitmask 0b111111111111
HOST_CORES='0-2,6-8'            # Cores reserved for host
HOST_CORES_MASK=C3              # 0-1,6-7, bitmask 0b000011000011
VIRT_CORES='3-5,9-11'           # Cores reserved for virtual machine(s)

VM_NAME=$1
VM_ACTION=$2

shield_vm() {
    cset set -c $TOTAL_CORES -s machine.slice
    # Shield two cores cores for host and rest for VM(s)
    cset shield --kthread on --cpu $VIRT_CORES
}

unshield_vm() {
    echo $TOTAL_CORES_MASK > /sys/bus/workqueue/devices/writeback/cpumask
    cset shield --reset
}

# For manual invocation
if [[ $VM_NAME == 'shield' ]];
then
    shield_vm
    exit 0
elif [[ $VM_NAME == 'unshield' ]];
then
    unshield_vm
    exit 0
fi

if [[ $VM_ACTION == 'prepare' ]];
then
    sync
    shield_vm
    # Reduce VM jitter: https://www.kernel.org/doc/Documentation/kernel-per-CPU-kthreads.txt
    sysctl vm.stat_interval=120

    sysctl -w kernel.watchdog=0
    # the kernel's dirty page writeback mechanism uses kthread workers. They introduce
    # massive arbitrary latencies when doing disk writes on the host and aren't
    # migrated by cset. Restrict the workqueue to use only cpu 0.
    echo $HOST_CORES_MASK > /sys/bus/workqueue/devices/writeback/cpumask
    # Force P-states to P0
    echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    echo 0 > /sys/bus/workqueue/devices/writeback/numa
    >&2 echo "VMs Shielded"
fi

if [[ $VM_ACTION == 'release' ]];
then
    # All VMs offline
    sysctl vm.stat_interval=1
    sysctl -w kernel.watchdog=1
    unshield_vm
    echo ondemand | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    echo 1 > /sys/bus/workqueue/devices/writeback/numa
    >&2 echo "VMs UnShielded"
fi